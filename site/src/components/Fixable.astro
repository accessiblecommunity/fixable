---
/** @fileoverview
 * Component that enables defining both broken and fixed state of an element or component.
 * Props specific to broken or fixed state can be nested within the respective
 * property; props common to both states can be specified top-level as usual.
 */

import type { ComponentProps, HTMLTag, Polymorphic } from "astro/types";
import { getMode } from "@/lib/mode";

const mode = getMode();

// NOTE: Props _needs_ to be the first declared type for Astro to process correctly

type Props<Tag extends HTMLTag | AstroComponent> = Tag extends HTMLTag
  ? Polymorphic<{ as: Tag }> &
      SpecialCaseProps<Partial<Omit<Polymorphic<{ as: Tag }>, "as">>>
  : Tag extends AstroComponent
    ? // This second ternary is required to pass type checking but the `never` will never occur
      ComponentProps<Tag> &
        SpecialCaseProps<Partial<ComponentProps<Tag>>> & {
          as: Tag;
        }
    : never;

type AstroComponent = (args: any) => any;

type SpecialCaseProps<T> = {
  /** Any attributes that should only be set on the broken version */
  broken?: T;
  /** Any attributes that should only be set on the fixed version */
  fixed?: T;
};

const { as: Tag, broken, fixed, ...props } = Astro.props;
---

<Tag {...props} {...mode === "broken" ? broken : fixed}>
  <slot />
</Tag>
