---
/** @fileoverview
 * Component that enables defining both broken and fixed state of an element or component.
 * Props specific to broken or fixed state can be nested within the respective
 * property; props common to both states can be specified top-level as usual.
 */

import { getMode } from "@/lib/mode";
import type { PolymorphicProps, TagOrComponent } from "./types";

const mode = getMode();

// Note(ken): & { as: never } below is designed to prevent setting `as`
// within broken/fixed, which the component does not support.
// Using Omit would be ideal, but causes TS complexity errors in this case.

type Props<Tag extends TagOrComponent> = PolymorphicProps<Tag> & {
  /** Any attributes that should only be set on the broken version */
  broken?: Partial<PolymorphicProps<Tag> & { as: never }>;
  /** Any attributes that should only be set on the fixed version */
  fixed?: Partial<PolymorphicProps<Tag> & { as: never }>;
}

const { as: Tag, broken, fixed, ...props } = Astro.props;
---

<Tag {...props} {...mode === "broken" ? broken : fixed}>
  <slot />
</Tag>
