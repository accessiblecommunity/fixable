---
import Layout from "@/layouts/Layout.astro";
import { startCase } from "lodash-es";

// TODO: flesh out products, likely in a content collection;
// this is temporary to test cart functionality
const products = {
  Apparel: {
    "t-shirt": 17.99,
    sweatshirt: 27.99,
    cap: 14.99,
  },
  "(Non-broken) Containers": {
    "water-bottle": 15.99,
    "coffee-mug": 12.99,
    "travel-mug": 24.99,
  },
  Accessories: {
    "keychain-charm": 19.99,
    "sticker-set": 9.99,
  },
} as const;
---

<Layout title="Gift Shop">
  <h1>Gift Shop</h1>
  <div class="container">
    <div class="products">
      <h2>Products</h2>
      {
        Object.keys(products).map((category) => (
          <>
            <h3>{category}</h3>
            <ul>
              {Object.entries(products[category]).map(([id, unitPrice]) => (
                <li>
                  {startCase(id.replace(/-/g, " "))} (${unitPrice}){" "}
                  <button id={`${id}-add`} data-price={unitPrice} type="button">
                    Add to cart
                  </button>
                </li>
              ))}
            </ul>
          </>
        ))
      }
    </div>
    <div class="cart">
      <h2>Cart</h2>
      <p id="cart-empty">No items in cart.</p>
      <ul id="cart-list"></ul>
      <p id="cart-total" hidden></p>
    </div>
  </div>
</Layout>

<script>
  import startCase from "lodash-es/startCase";
  import { persist, recall } from "@/lib/client/store";

  const cart = recall("cartPrototype");
  renderCart();

  function renderCart() {
    const listEl = document.getElementById("cart-list") as HTMLUListElement;
    listEl.innerHTML = "";

    const totalEl = document.getElementById(
      "cart-total"
    ) as HTMLParagraphElement;

    const entries = Object.entries(cart);
    document.getElementById("cart-empty")!.hidden = !!entries.length;
    totalEl.hidden = !entries.length;

    let total = 0;
    for (const [id, { quantity, unitPrice }] of entries) {
      const removeEl = document.createElement("button");
      removeEl.id = `${id}-remove`;
      removeEl.type = "button";
      removeEl.textContent = "Remove";

      const itemEl = document.createElement("li");
      itemEl.textContent = `${startCase(id.replace(/-/g, " "))} (${quantity} Ã— $${unitPrice}) `;
      itemEl.appendChild(removeEl);

      listEl.appendChild(itemEl);

      total += quantity * unitPrice;
    }

    totalEl.innerHTML = `<strong>Total: $${total.toFixed(2)}</strong>`;
  }

  document.body.addEventListener("click", (event) => {
    const buttonEl = event.target as HTMLButtonElement;
    if (buttonEl.tagName !== "BUTTON") return;
    const match = /^(.*)-(add|remove)$/.exec(buttonEl.id);
    if (!match || !match[1]) return;

    const cartProduct = cart[match[1]];
    if (cartProduct) {
      cartProduct.quantity += match[2] === "add" ? 1 : -1;
      if (cartProduct.quantity < 1) delete cart[match[1]];
    } else if (match[2] === "add") {
      cart[match[1]] = { quantity: 1, unitPrice: +buttonEl.dataset.price! };
    }

    renderCart();
    persist("cartPrototype", cart);
  });
</script>

<style>
  .container {
    display: flex;
    gap: calc(1rem * var(--ms15));
  }

  .products {
    flex-grow: 1;
  }

  .cart {
    width: 20rem;
  }

  ul {
    list-style-type: none;
    padding: 0;

    /* This needs to be nested to reach programmatically-generated list items */
    li {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: calc(1rem * var(--ms-2)) 0;

      &:not(:last-child) {
        border-bottom: 1px solid var(--hairline);
      }
    }
  }
</style>
