---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { generateExcerpt } from "@/lib/markdown";
import { Icon } from "astro-icon/components";
import { startCase } from "lodash-es";
import FixableRegion from "@/components/FixableRegion.astro";
import Fixable from "@/components/Fixable.astro";

const posts = await Promise.all(
  (await getCollection("blog")).map(async (post) => ({
    ...post,
    excerpt: (await generateExcerpt(post.body)).code,
  }))
);
posts.sort((a, b) => {
  if (a.data.date === "now") return -1;
  if (b.data.date === "now") return 1;
  if (a.data.date > b.data.date) return -1;
  if (a.data.date < b.data.date) return 1;
  return 0;
});

const livePost = posts.shift();
const postsByCategory = posts.reduce(
  (map, post) => {
    const category = post.id.split("/")[0];
    if (category in map) map[category].push(post);
    else map[category] = [post];
    return map;
  },
  {} as Record<string, typeof posts>
);
---

<Layout title="Blog">
  {
    livePost && (
      <div class="featured">
        <div>
          <a class="image-link" href={`${livePost.slug}/`}>
            <div
              class="background"
              style={{
                backgroundImage: `url(${livePost.data.image.src})`,
                backgroundPosition: livePost.data.imagePosition,
              }}
            />
          </a>
          <h1>Blog</h1>
        </div>
        <div>
          <h2>{livePost.data.title}</h2>
          <Fragment set:html={livePost.excerpt} />
          <a class="read-more" href={`${livePost.slug}/`}>
            <FixableRegion>
              <span slot="fixed">Read more</span>
            </FixableRegion>
            <Fixable
              as={Icon}
              name="ri:arrow-drop-right-line"
              broken={{ size: 24 }}
              fixed={{ size: 44 }}
            />
          </a>
        </div>
      </div>
    )
  }
  <div class="categories">
    {
      Object.keys(postsByCategory).map((category) => (
        <div class="category">
          <h2>{startCase(category.replace(/-/g, " "))}</h2>
          {postsByCategory[category].map((post) => (
            <div class="post">
              <a
                class="image-link"
                href={`${post.data.brokenUrl ? "broken" : post.slug}/`}
              >
                <div
                  class="background"
                  style={{
                    backgroundImage: `url(${post.data.image.src})`,
                    backgroundPosition: post.data.imagePosition,
                  }}
                />
              </a>
              <div>
                <Fragment set:html={post.excerpt} />
                <a href={`${post.data.brokenUrl ? "broken" : post.slug}/`}>
                  <h3>{post.data.title}</h3>
                </a>
              </div>
            </div>
          ))}
        </div>
      ))
    }
  </div>
</Layout>

<style>
  .image-link {
    display: block;
    height: 30vh;
    min-height: 200px;
    overflow: hidden;
    position: relative;

    &:hover .background {
      transform: scale(1.2);
    }
  }

  .background {
    background-size: cover;
    background-position: center;
    inset: 0;
    position: absolute;
    transition: all 300ms ease;
  }

  .featured {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    position: relative;

    & h1 {
      color: var(--white);
      font-size: calc(1rem * var(--ms16));
      position: absolute;
      top: 0;
      margin: -0.4em 0;
      text-align: center;
      text-transform: uppercase;
      width: 100%;
    }

    & .image-link {
      height: 50vh;
      min-height: 300px;
    }
  }

  .categories {
    display: flex;
    flex-direction: column;
    gap: calc(1rem * var(--ms10));
    margin-top: calc(1rem * var(--ms10));
  }

  .category {
    display: flex;
    flex-direction: column;
    align-items: flex-start;

    &:last-child {
      align-items: flex-end;
    }
  }

  .category h2 {
    background-color: var(--gold-vivid-500);
    color: var(--white);
    display: inline-block;
    padding: calc(1rem * var(--ms-5));
    width: auto;
  }

  .post {
    border-block-end:3px solid var(--gray-200);
    margin-bottom: calc(1rem * var(--ms3));
    padding-block-end:calc(1rem * var(--ms4));
    & h3{
      margin-block-end:0;
      /* negative margin because it seems to be impossible to target the p in the fragment text */
      margin-block-start:-0.493em;
    }
  }

  @media (min-width: 60em) {
    .categories,
    .featured {
      flex-direction: row;
    }

    .featured {
      & > :first-child {
        width: 66%;
        flex-shrink: 0;
      }

      & h1 {
        bottom: 0;
        top: auto;
        width: 66%;
      }
    }

    .categories .image-link {
    }
  }

  .read-more {
    border: 2px solid var(--blue-500);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;

    & span {
      margin-left: 1rem;
    }

    &:hover {
      background-color: var(--blue-500);
      color: var(--white);
    }
  }
</style>
