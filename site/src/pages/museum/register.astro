---
import Fixable from "@/components/Fixable.astro";
import FormLayout from "@/components/FormLayout.astro";
import Layout from "@/layouts/Layout.astro";

/** @breaklocation Register & Sign In */
/** @breakprocess gift-shop */
---

<Layout title="Create Account">
  <h1>Create Account</h1>
  <FormLayout action="../login/">
    <h2>Account Information</h2>
    <Fixable
      as="p"
      id="error"
      class="error"
      hidden
      fixed={{ role: "alert", tabindex: -1 }}
    />
    <label
      >Display Name
      <input name="displayName" />
    </label>
    <label
      >Email Address
      <input type="email" name="email" />
    </label>
    <label
      >Password
      <input name="password" type="password" />
    </label>
    <label
      >Confirm password
      <input name="password-confirm" type="password" />
    </label>
    <h2>Prove You're a Human</h2>
    {
      /**
       * @break
       * wcag2: 1.1.1
       * wcag3: Equivalent text alternative
       * description: A CAPTCHA is required and no alternative is provided.
       */
      /**
       * @break
       * wcag2:
       *   - 3.3.8
       *   - 3.3.9
       * wcag3: No cognitive tests
       * description: A cognitive test is present on the Register page.
       */
    }
    <canvas id="captcha" width="360" height="80"></canvas>
    {
      /**
       * @break
       * wcag2: 1.4.1
       * description: |
       *   The focused state of the CAPTCHA field only affects its existing border,
       *   and does not have sufficient contrast against the unfocused state.
       */
      /**
       * @break
       * wcag2: 2.4.13
       * wcag3: Custom indicator
       * description: |
       *   The focused state of the CAPTCHA field only affects a 1px-thick border,
       *   and does not have sufficient contrast against the unfocused state.
       */
      /**
       * @break
       * wcag3: Control contrast
       * description:
       *   - The CAPTCHA field has an invisible text cursor/caret.
       *   - |
       *     The CAPTCHA field is initially empty and indicated only by a
       *     low-contrast underline, making its target area ambiguous.
       * discussionItems:
       *   - Does the invisible text cursor/caret fail Control contrast?
       */
    }
    <label
      >Enter the letters shown above:
      <input name="captcha" class="captcha" />
    </label>
    <button>Submit</button>
  </FormLayout>
</Layout>

<script>
  import { z } from "astro/zod";
  import random from "lodash-es/random";
  import { validateInputs } from "@/lib/client/form";
  import { persist, storeSchema } from "@/lib/client/store";
  import { getMode } from "@/lib/mode";

  const canvas = document.getElementById("captcha") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d")!;
  ctx.font = "36px serif";

  const codeLetters: string[] = [];
  for (let i = 0; i < 5; i++)
    codeLetters.push(String.fromCodePoint(random(65, 90)));
  codeLetters.forEach((letter, i) => {
    const tx = 50 + i * 60;
    const ty = 30;
    ctx.save();
    ctx.translate(tx, ty);
    ctx.rotate((random(0, 360) * Math.PI) / 180);
    ctx.fillText(letter, 0, 0, 40);
    ctx.restore();
  });

  const errorEl = document.getElementById("error") as HTMLParagraphElement;
  const form = document.querySelector("main form") as HTMLFormElement;
  form.addEventListener("submit", (event) => {
    const codeText = codeLetters.join("");
    const registrationSchema = storeSchema.shape.registration
      .removeDefault()
      .unwrap();

    const result = validateInputs(
      form,
      registrationSchema.extend({
        displayName: z.string().min(1),
        "password-confirm": z
          .string()
          .min(1)
          .refine((value) => value === form.elements["password"].value),
        captcha: z.string().refine((value) => value.toUpperCase() === codeText),
      })
    );

    if (!result.success) {
      event.preventDefault();
      errorEl.textContent =
        "All fields are required and the password fields must match.";
      errorEl.hidden = false;

      if (getMode() === "fixed") errorEl.focus();
    }

    // Re-parse to strip fields that shouldn't persist
    else persist("registration", registrationSchema.parse(result.data));
  });
</script>

<style>
  input.captcha {
    border: none;
    border-bottom: 1px solid var(--gray-300);
    caret-color: var(--white);
    letter-spacing: 1rem;
    width: 10rem;

    &:focus {
      border-bottom-color: var(--gray-500);
      outline: none;
    }
  }
</style>
