---
import Fixable from "@/components/Fixable.astro";
import FormLayout from "@/components/FormLayout.astro";
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Create Account">
  <h1>Create Account</h1>
  <FormLayout action="../login/">
    <h2>Account Information</h2>
    <Fixable
      as="p"
      id="error"
      class="error"
      hidden
      fixed={{ role: "alert", tabindex: -1 }}
    />
    <label
      >First name
      <input name="firstName" />
    </label>
    <label
      >Middle name
      <input name="middleName" />
    </label>
    <label
      >Last name
      <input name="lastName" />
    </label>
    <label
      >Email Address
      <Fixable
        as="input"
        broken={{ type: "text" }}
        fixed={{ type: "email", "aria-describedby": "email-suggestion" }}
        name="email"
        id="email"
      />
    </label>
    <Fixable
      as="div"
      broken={{ class: "email-did-you-mean__broken" }}
      fixed={{ class: "email-did-you-mean__fixed", role: "alert" }}
      id="email-suggestion"
    />
    <label
      >Phone number
      <Fixable as="input" fixed={{ type: "tel" }} name="phone" />
    </label>
    <label
      >Password
      <input name="password" type="password" />
    </label>
    <label
      >Confirm password
      <input name="password-confirm" type="password" />
    </label>
    <h2>Prove You're a Human</h2>
    <Fixable
      as="p"
      id="captcha-error"
      class="error"
      hidden
      fixed={{ role: "alert", tabindex: -1 }}
    />
    <canvas id="captcha" width="360" height="80"></canvas>
    <label
      >Enter the letters shown above:
      <input name="captcha" class="captcha" />
    </label>
    <button>Submit</button>
  </FormLayout>
</Layout>

<script>
  import { z } from "astro/zod";
  import random from "lodash-es/random";
  import { validateInputs } from "@/lib/client/form";
  import { persist, storeSchema } from "@/lib/client/store";
  import { getMode } from "@/lib/mode";

  const canvas = document.getElementById("captcha") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d")!;
  ctx.font = "36px serif";

  const codeLetters: string[] = [];
  for (let i = 0; i < 5; i++)
    codeLetters.push(String.fromCodePoint(random(65, 90)));
  codeLetters.forEach((letter, i) => {
    const tx = 50 + i * 60;
    const ty = 30;
    ctx.save();
    ctx.translate(tx, ty);
    ctx.rotate((random(0, 360) * Math.PI) / 180);
    ctx.fillText(letter, 0, 0, 40);
    ctx.restore();
  });

  const errorEl = document.getElementById("error") as HTMLParagraphElement;
  const captchaErrorEl = document.getElementById(
    "captcha-error"
  ) as HTMLParagraphElement;
  const form = document.querySelector("main form") as HTMLFormElement;
  form.addEventListener("submit", (event) => {
    const codeText = codeLetters.join("");
    const registrationSchema = storeSchema.shape.registration
      .removeDefault()
      .unwrap();

    const result = validateInputs(
      form,
      registrationSchema.extend({
        "password-confirm": z
          .string()
          .min(1)
          .refine((value) => value === form.elements["password"].value),
      })
    );

    if (!result.success) {
      event.preventDefault();
      errorEl.textContent =
        "All fields except Middle Name are required, and the password fields must match.";
      errorEl.hidden = false;

      if (getMode() === "fixed") errorEl.focus();
    }

    const captchaResult = validateInputs(
      form,
      z.object({
        captcha: z.string().refine((value) => value.toUpperCase() === codeText),
      })
    );
    if (!captchaResult.success) {
      event.preventDefault();
      captchaErrorEl.textContent =
        "The text you entered does not match the letters in the image; try again.";
      captchaErrorEl.hidden = false;

      if (getMode() === "fixed") captchaErrorEl.focus();
    }

    // Re-parse to strip fields that shouldn't persist
    else persist("registration", registrationSchema.parse(result.data));
  });

  document.getElementById("email")!.addEventListener("blur", function () {
    const email = (this as HTMLInputElement).value || "";
    const suggestion = document.getElementById("email-suggestion")!;
    if (
      email &&
      email.includes("@") &&
      !email.endsWith("@gmail.com") &&
      !email.endsWith("@hotmail.com")
    ) {
      suggestion.style.display = "block";
      suggestion.textContent = "Did you mean gmail.com or hotmail.com?";
    } else {
      suggestion.style.display = "";
      suggestion.textContent = "";
    }
  });
</script>

<style>
  input.captcha {
    border: none;
    border-bottom: 1px solid var(--gray-300);
    caret-color: var(--white);
    letter-spacing: 1rem;
    width: 10rem;

    &:focus {
      border-bottom-color: var(--gray-500);
      outline: none;
    }
  }

  #email-suggestion {
    display: none;
    margin-block-start: -1rem;
  }

  .email-did-you-mean__broken {
    color: var(--red-warm-400);
  }

  .email-did-you-mean__fixed {
    color: var(--red-warm-500);
  }
</style>
